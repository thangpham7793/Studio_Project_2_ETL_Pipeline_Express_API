files without primary key? and mine_name will be omitted?

field names / col names should be in snake_case and (like what you did :D)

all values should be String except for the value of the field 'geometry'

strip all non-alphanumeric characters from fields (like ,;:?)

all values should not contain any quotes ('/") or special characters (just to be safe)

the field 'location' is a dictionary with the form so that Mongodb can do geospatial query:

NOTE: do you need to format it like this? or just insert an index on the coordinates field

'location': {
  'coordinates': [lng, lat],
  'type': 'Point'
}

This means some transformation is needed on the lat/lng cols to form the location field with a dictionary/document as its value

There should be no quotes surrounding the dictionary

[lng, lat]: must be an arr of number (float/double)

lng: should be negative given the geographical location of the US (some tables use West/East instead of +/- before the number)

controller/operator are different, so they should not be combined

Field names with NA, NaN or missing values should be removed in each document before being inserted (as Mongodb still accepts field with missing values)

the final result will be in JSON format to keep the nested document of the location field. I try using csv but it's parsed as a String by Mongodb and cannot be used to locate mines.

There are 2 ways, either convert each record into a json document, each separated by a line break '\n' 

{"record1": "value"}
{"record2": "value"}

Or as an array of json objects

[{"record1": "value"}, {"record2": "value"}]

For the 2nd choice, something like.

with open('./data/file_name.json', 'w') as file:
    json.dump(list(json_df.values()), file)
    file.close()

The 3rd choice is to use PyMongo to insert. Maybe this is better since the command line would be quite complicated with all the logging in?

Index: depending on the access pattern, can index the doc based on a geographical unit (like state or county, but county may not be present in all docs, but we can add it if we use the coordinates to look it up, and that would further increase selectivity), followed by the material and then the coordinates. 

Should all materials be combined into one field?

Index: still there's a constraint with compound index as the first prefix must always be present

